/*
 * Copyright (c) 2017, GoMint, BlackyPaw and geNAZt
 *
 * This code is licensed under the BSD license found in the
 * LICENSE file in the root directory of this source tree.
 */

package io.gomint.emulator.client;

import io.gomint.emulator.AdditionalProtocol;
import io.gomint.emulator.PostProcessExecutor;
import io.gomint.jraknet.ClientSocket;
import io.gomint.jraknet.Connection;
import io.gomint.jraknet.EncapsulatedPacket;
import io.gomint.jraknet.PacketBuffer;
import io.gomint.jraknet.PacketReliability;
import io.gomint.jraknet.SocketEvent;
import io.gomint.math.Location;
import io.gomint.server.jwt.JwtSignatureException;
import io.gomint.server.jwt.JwtToken;
import io.gomint.server.network.PlayerConnectionState;
import io.gomint.server.network.Protocol;
import io.gomint.server.network.packet.Packet;
import io.gomint.server.network.packet.PacketBatch;
import io.gomint.server.network.packet.PacketDisconnect;
import io.gomint.server.network.packet.PacketEncryptionRequest;
import io.gomint.server.network.packet.PacketEncryptionResponse;
import io.gomint.server.network.packet.PacketEntityRelativeMovement;
import io.gomint.server.network.packet.PacketLogin;
import io.gomint.server.network.packet.PacketMovePlayer;
import io.gomint.server.network.packet.PacketPlayState;
import io.gomint.server.network.packet.PacketResourcePackResponse;
import io.gomint.server.network.packet.PacketResourcePackStack;
import io.gomint.server.network.packet.PacketResourcePacksInfo;
import io.gomint.server.network.packet.PacketSetChunkRadius;
import io.gomint.server.network.packet.PacketSetLocalPlayerAsInitialized;
import io.gomint.server.network.packet.PacketSpawnEntity;
import io.gomint.server.network.packet.PacketStartGame;
import io.gomint.server.network.packet.PacketWorldChunk;
import io.gomint.server.resource.ResourceResponseStatus;
import io.gomint.server.scheduler.AsyncScheduledTask;
import io.gomint.server.util.Pair;
import io.gomint.util.random.FastRandom;
import lombok.RequiredArgsConstructor;
import org.json.simple.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.net.SocketException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.security.Key;
import java.util.Base64;
import java.util.HashMap;
import java.util.UUID;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.Consumer;
import java.util.zip.InflaterInputStream;

import static io.gomint.server.network.Protocol.PACKET_BATCH;
import static io.gomint.server.network.Protocol.PACKET_ENCRYPTION_REQUEST;
import static io.gomint.server.network.Protocol.PACKET_ENTITY_METADATA;
import static io.gomint.server.network.Protocol.PACKET_MOVE_PLAYER;
import static io.gomint.server.network.Protocol.PACKET_PLAY_STATE;
import static io.gomint.server.network.Protocol.PACKET_RESOURCEPACK_INFO;
import static io.gomint.server.network.Protocol.PACKET_RESOURCEPACK_STACK;
import static io.gomint.server.network.Protocol.PACKET_SPAWN_ENTITY;
import static io.gomint.server.network.Protocol.PACKET_START_GAME;
import static io.gomint.server.network.Protocol.PACKET_WORLD_CHUNK;

/**
 * @author geNAZt
 * @version 1.0
 */
public class Client {

    private static final AtomicInteger CONNECTED = new AtomicInteger( 0 );
    private static final AtomicInteger DISCONNECTED = new AtomicInteger( 0 );

    public static void printDebug() {
        LOGGER.info( "Connected {}, disconnected {}", CONNECTED.get(), DISCONNECTED.get() );
    }

    private static final AtomicInteger CLIENT_IDS = new AtomicInteger( 0 );
    private static final Logger LOGGER = LoggerFactory.getLogger( Client.class );
    private final ScheduledExecutorService service;
    private final PostProcessExecutor postProcessExecutor;
    private final Consumer<Pair<Integer, Integer>> chunkPairConsumer;
    private Pair<Integer, Integer> spawnChunk;
    private ClientSocket socket;
    private Connection connection;
    private AtomicInteger chunkCounter = new AtomicInteger( 0 );

    private PlayerConnectionState state = PlayerConnectionState.HANDSHAKE;

    private EncryptionHandler encryptionHandler;
    private ScheduledFuture<?> ticker;

    private Location spawn;
    private Location currentPos;
    private boolean spawned;

    private String name;

    private long ownId;
    private long runtimeId;

    public Client( ScheduledExecutorService scheduledExecutorService, PostProcessExecutor postProcessExecutor, Consumer<Pair<Integer, Integer>> chunkPairConsumer ) {
        this.service = scheduledExecutorService;
        this.postProcessExecutor = postProcessExecutor;
        this.chunkPairConsumer = chunkPairConsumer;

        this.socket = new ClientSocket();

        try {
            this.socket.initialize();
            this.socket.setMojangModificationEnabled( true );
            this.socket.setEventHandler( ( socket, socketEvent ) -> {
                if ( socketEvent.getType() == SocketEvent.Type.CONNECTION_CLOSED ) {
                    CONNECTED.decrementAndGet();
                    DISCONNECTED.incrementAndGet();
                }

                if ( socketEvent.getType() == SocketEvent.Type.CONNECTION_ATTEMPT_SUCCEEDED ) {
                    CONNECTED.incrementAndGet();

                    Client.this.connection = socketEvent.getConnection();
                    Client.this.connection.addDataProcessor( packetData -> {
                        PacketBuffer buffer = new PacketBuffer( packetData.getPacketData(), 0 );
                        if ( buffer.getRemaining() <= 0 ) {
                            // Malformed packet:
                            return packetData;
                        }

                        // Check if packet is batched
                        byte packetId = buffer.readByte();
                        if ( packetId == Protocol.PACKET_BATCH ) {
                            // Decompress and decrypt
                            byte[] pureData = handleBatchPacket( buffer );
                            EncapsulatedPacket newPacket = new EncapsulatedPacket();
                            newPacket.setPacketData( pureData );
                            return newPacket;
                        }

                        return packetData;
                    } );

                    Client.this.login();
                }
            } );
        } catch ( SocketException e ) {
            LOGGER.warn( "Exception caught", e );
        }
    }

    /**
     * Connect to the given server
     *
     * @param ip   of the server
     * @param port of the server
     */
    public void connect( String ip, int port ) {
        this.socket.connect( ip, port );
    }

    /**
     * Handles compressed batch packets directly by decoding their payload.
     *
     * @param buffer The buffer containing the batch packet's data (except packet ID)
     * @return decompressed and decrypted data
     */
    private byte[] handleBatchPacket( PacketBuffer buffer ) {
        // Encrypted?
        byte[] input = new byte[buffer.getRemaining()];
        System.arraycopy( buffer.getBuffer(), buffer.getPosition(), input, 0, input.length );
        if ( this.encryptionHandler != null ) {
            input = this.encryptionHandler.decryptInputFromServer( input );
            if ( input == null ) {
                // Decryption error
                disconnect( "Checksum of encrypted packet was wrong" );
                return null;
            }
        }

        InflaterInputStream inflaterInputStream = new InflaterInputStream( new ByteArrayInputStream( input ) );

        ByteArrayOutputStream bout = new ByteArrayOutputStream( buffer.getRemaining() );
        byte[] batchIntermediate = new byte[256];

        try {
            int read;
            while ( ( read = inflaterInputStream.read( batchIntermediate ) ) > -1 ) {
                bout.write( batchIntermediate, 0, read );
            }
        } catch ( IOException e ) {
            return null;
        }

        return bout.toByteArray();
    }

    public void disconnect( String message ) {
        if ( message != null && message.length() > 0 ) {
            PacketDisconnect packet = new PacketDisconnect();
            packet.setMessage( message );
            this.send( packet );

            this.service.submit( new AsyncScheduledTask( () -> {
                Client.this.internalClose( message );
            }, 3, -1, TimeUnit.SECONDS ) );
        } else {
            this.internalClose( message );
        }
    }

    public void send( Packet packet ) {
        // LOGGER.info( "Sending packet {}", Integer.toHexString( packet.getId() & 0xff ) );

        if ( !( packet instanceof PacketBatch ) ) {
            this.postProcessExecutor.addWork( this, new Packet[]{ packet } );
        } else {
            PacketBuffer buffer = new PacketBuffer( 64 );
            buffer.writeByte( packet.getId() );
            packet.serialize( buffer, 274 );

            this.connection.send( PacketReliability.RELIABLE_ORDERED, packet.orderingChannel(), buffer.getBuffer(), 0, buffer.getPosition() );
        }
    }

    private void internalClose( String message ) {
        if ( this.connection != null ) {
            if ( this.connection.isConnected() && !this.connection.isDisconnecting() ) {
                this.connection.disconnect( message );
            }
        }
    }

    private void login() {
        if ( this.state == PlayerConnectionState.HANDSHAKE ) {
            this.state = PlayerConnectionState.LOGIN;

            // Init read cycle (50ms)
            this.ticker = this.service.scheduleAtFixedRate( new Runnable() {
                @Override
                public void run() {
                    long currentMillis = System.currentTimeMillis();

                    EncapsulatedPacket packetData;
                    while ( ( packetData = Client.this.connection.receive() ) != null ) {
                        // CHECKSTYLE:OFF
                        try {
                            Client.this.handleSocketData( currentMillis, new PacketBuffer( packetData.getPacketData(), 0 ) );
                        } catch ( Exception e ) {
                            e.printStackTrace();
                        }
                        // CHECKSTYLE:ON
                    }

                    if ( spawned ) {
                        float xRand = FastRandom.current().nextFloat();
                        float zRand = FastRandom.current().nextFloat();

                        if ( FastRandom.current().nextBoolean() ) {
                            xRand *= -1;
                        }

                        if ( FastRandom.current().nextBoolean() ) {
                            zRand *= -1;
                        }

                        move( currentPos.add( zRand, 0, xRand ) );
                    }
                }
            }, 50, 50, TimeUnit.MILLISECONDS );

            PacketLogin login = new PacketLogin();
            login.setProtocol( 274 ); // 1.4.x.x

            // Send our handshake to the server -> this will trigger it to respond with a 0x03 ServerHandshake packet:
            MojangLoginForger mojangLoginForger = new MojangLoginForger();
            mojangLoginForger.setPublicKey( EncryptionHandler.PROXY_KEY_PAIR.getPublic() );
            mojangLoginForger.setUsername( this.name = "GoBot_" + CLIENT_IDS.incrementAndGet() );
            mojangLoginForger.setUuid( UUID.randomUUID() );
            mojangLoginForger.setSkinData( new JSONObject( new HashMap<Object, Object>() {{
                put( "ServerAddress", "yodamine.com:19132" );
                put( "CurrentInputMode", 1 );
                put( "DefaultInputMode", 1 );
                put( "ClientRandomId", FastRandom.current().nextInt() );
                put( "GuiScale", 0 );
                put( "GameVersion", "1.6.0.1" );
                put( "ThirdPartyName", name );
                put( "DeviceModel", "GoMintEmulator" );
                put( "DeviceOS", 7 );
                put( "CapeData", "" );
                put( "SkinId", mojangLoginForger.getUuid().toString() + "_Custom" );
                put( "SkinGeometry", "" );
                put( "SkinData", "" );
                put( "SelfSignedId", UUID.randomUUID().toString() );
                put( "PlatformOnlineId", "" );
                put( "PlatformOfflineId", "" );
                put( "LanguageCode", "en_US" );
                put( "ADRole", 0 );
                put( "UIProfile", 0 );
            }} ) );
            mojangLoginForger.setXuid( "" );

            String jwt = "{\"chain\":[\"" + mojangLoginForger.forge( EncryptionHandler.PROXY_KEY_PAIR.getPrivate() ) + "\"]}";
            String skin = mojangLoginForger.forgeSkin( EncryptionHandler.PROXY_KEY_PAIR.getPrivate() );

            // More data please
            ByteBuffer byteBuffer = ByteBuffer.allocate( jwt.length() + skin.length() + 8 );
            byteBuffer.order( ByteOrder.LITTLE_ENDIAN );
            byteBuffer.putInt( jwt.length() );
            byteBuffer.put( jwt.getBytes() );

            // We need the skin
            byteBuffer.putInt( skin.length() );
            byteBuffer.put( skin.getBytes() );

            login.setPayload( byteBuffer.array() );
            this.send( login );
        }
    }

    /**
     * Handles data received directly from the player's connection.
     *
     * @param currentTimeMillis The time in millis of this tick
     * @param buffer            The buffer containing the received data
     */
    private void handleSocketData( long currentTimeMillis, PacketBuffer buffer ) {
        if ( buffer.getRemaining() <= 0 ) {
            // Malformed packet:
            return;
        }

        if ( this.connection != null ) {
            while ( buffer.getRemaining() > 0 ) {
                int packetLength = buffer.readUnsignedVarInt();

                byte[] payData = new byte[packetLength];
                buffer.readBytes( payData );
                PacketBuffer pktBuf = new PacketBuffer( payData, 0 );
                this.handleBufferData( currentTimeMillis, pktBuf );

                if ( pktBuf.getRemaining() > 100 ) {
                    LOGGER.error( "Malformed batch packet payload: Could not read enclosed packet data correctly: 0x{} remaining {} bytes", Integer.toHexString( payData[0] ), pktBuf.getRemaining() );
                    return;
                }
            }
        } else {
            this.handleBufferData( currentTimeMillis, buffer );
        }
    }

    private void handleBufferData( long currentTimeMillis, PacketBuffer buffer ) {
        // Grab the packet ID from the packet's data
        byte packetId = buffer.readByte();

        // There is some data behind the packet id when non batched packets (2 bytes)
        if ( packetId == PACKET_BATCH ) {
            LOGGER.error( "Malformed batch packet payload: Batch packets are not allowed to contain further batch packets" );
        }

        buffer.readShort();

        // LOGGER.info( "Got MCPE packet {}", Integer.toHexString( packetId & 0xFF ) );

        // If we are still in handshake we only accept certain packets:
        if ( this.state == PlayerConnectionState.LOGIN ) {
            if ( packetId == PACKET_PLAY_STATE ) {
                PacketPlayState packetPlayState = new PacketPlayState();
                packetPlayState.deserialize( buffer, 274 );

                if ( packetPlayState.getState() != PacketPlayState.PlayState.LOGIN_SUCCESS ) {
                    this.destroy( "Server responded with " + packetPlayState.getState().name() );
                }

                this.state = PlayerConnectionState.RESOURCE_PACK;

                return;
            } else if ( packetId == PACKET_ENCRYPTION_REQUEST ) {
                PacketEncryptionRequest packet = new PacketEncryptionRequest();
                packet.deserialize( buffer, 274 );

                LOGGER.info( "JWT content: {}", packet.getJwt() );

                // We need to verify the JWT request
                JwtToken token = JwtToken.parse( packet.getJwt() );
                String keyDataBase64 = (String) token.getHeader().getProperty( "x5u" );
                Key key = EncryptionHandler.createPublicKey( keyDataBase64 );

                try {
                    if ( token.validateSignature( key ) ) {
                        LOGGER.debug( "For server: Valid encryption start JWT" );
                    }
                } catch ( JwtSignatureException e ) {
                    LOGGER.error( "Invalid JWT signature from server: ", e );
                }

                this.encryptionHandler = new EncryptionHandler();
                this.encryptionHandler.setServerPublicKey( keyDataBase64 );
                this.encryptionHandler.beginServersideEncryption( Base64.getDecoder().decode( (String) token.getClaim( "salt" ) ) );

                // Tell the server that we are ready to receive encrypted packets from now on:
                PacketEncryptionResponse response = new PacketEncryptionResponse();
                this.send( response );
            } else if ( packetId == PACKET_RESOURCEPACK_INFO ) {
                this.state = PlayerConnectionState.RESOURCE_PACK;
            }
        }

        // When we are in resource pack state
        if ( this.state == PlayerConnectionState.RESOURCE_PACK ) {
            if ( packetId == PACKET_RESOURCEPACK_INFO ) {
                PacketResourcePacksInfo packet = new PacketResourcePacksInfo();
                packet.deserialize( buffer, 274 );

                //LOGGER.info( "Got resource packet info" );

                PacketResourcePackResponse packetResourcePackResponse = new PacketResourcePackResponse();
                packetResourcePackResponse.setStatus( ResourceResponseStatus.HAVE_ALL_PACKS );
                this.send( packetResourcePackResponse );

            } else if ( packetId == PACKET_RESOURCEPACK_STACK ) {
                PacketResourcePackStack stack = new PacketResourcePackStack();
                stack.deserialize( buffer, 274 );

                // LOGGER.info( "Got resource packet stack" );

                PacketResourcePackResponse packetResourcePackResponse = new PacketResourcePackResponse();
                packetResourcePackResponse.setStatus( ResourceResponseStatus.COMPLETED );
                this.send( packetResourcePackResponse );

                this.state = PlayerConnectionState.PLAYING;
            }
        }

        // LOGGER.info( "Got packet {}", Integer.toHexString( packetId & 0xFF ) );

        if ( buffer.getRemaining() > 0 ) {
            Packet packet = Protocol.createPacket( packetId );
            if ( packet == null ) {
                packet = AdditionalProtocol.createPacket( packetId );
                if ( packet == null ) {
                    // Got to skip
                    buffer.skip( buffer.getRemaining() );
                    return;
                }
            }

            packet.deserialize( buffer, 274 );
            this.handlePacket( currentTimeMillis, packet );
        }
    }

    private void handlePacket( long currentTimeMillis, Packet packet ) {
        if ( packet.getId() == PACKET_START_GAME ) {
            this.spawn = ( (PacketStartGame) packet ).getSpawn();
            this.ownId = ( (PacketStartGame) packet ).getEntityId();
            this.runtimeId = ((PacketStartGame) packet).getRuntimeEntityId();

            this.spawnChunk = new Pair<>( (int) ( this.spawn.getX() / 16 ), (int) ( this.spawn.getZ() / 16 ) );

            PacketSetChunkRadius chunkRadius = new PacketSetChunkRadius();
            chunkRadius.setChunkRadius( 7 );
            this.send( chunkRadius );

            // Send set local player init
            PacketSetLocalPlayerAsInitialized packetSetLocalPlayerAsInitialized = new PacketSetLocalPlayerAsInitialized();
            packetSetLocalPlayerAsInitialized.setEntityId( this.ownId );
            this.send( packetSetLocalPlayerAsInitialized );
        } else if ( packet.getId() == PACKET_PLAY_STATE ) {
            PacketPlayState.PlayState playState = ( (PacketPlayState) packet ).getState();
            if ( playState == PacketPlayState.PlayState.SPAWN ) {
                // Send first movement
                this.move( this.spawn );
                this.spawned = true;

                System.out.println( "Bot " + this.name + " spawned" );

                PacketSetLocalPlayerAsInitialized initializedPacket = new PacketSetLocalPlayerAsInitialized();
                initializedPacket.setEntityId( this.ownId );
                send( initializedPacket );
            }
        } else if ( packet.getId() == PACKET_MOVE_PLAYER ) {
            PacketMovePlayer player = (PacketMovePlayer) packet;
            if ( player.getEntityId() == this.ownId ) {
                Location location = new Location( null, player.getX(), player.getY(), player.getZ(), player.getYaw(), player.getPitch() );
                this.move( location );
            }
        } else if ( packet.getId() == PACKET_ENTITY_METADATA ) {
            // LOGGER.info( "Entity metadata: {}", packet );
        } else if ( packet.getId() == PACKET_SPAWN_ENTITY ) {
            PacketSpawnEntity entity = (PacketSpawnEntity) packet;
            // LOGGER.info( "Spawning entity: {}", entity.getEntityType().name() );
        } else if ( packet.getId() == PACKET_WORLD_CHUNK ) {
            PacketWorldChunk chunk = (PacketWorldChunk) packet;
            int x = chunk.getX() - this.spawnChunk.getFirst();
            int z = chunk.getZ() - this.spawnChunk.getSecond();
            if ( this.chunkPairConsumer != null ) {
                this.chunkPairConsumer.accept( new Pair<>( x, z ) );
            }
        }
    }

    private void move( Location spawn ) {
        PacketMovePlayer movePlayer = new PacketMovePlayer();
        movePlayer.setEntityId( this.runtimeId );
        movePlayer.setX( spawn.getX() );
        movePlayer.setY( spawn.getY() );
        movePlayer.setZ( spawn.getZ() );
        movePlayer.setYaw( spawn.getYaw() );
        movePlayer.setPitch( spawn.getPitch() );
        this.send( movePlayer );
        this.currentPos = spawn;
    }

    private void destroy( String message ) {
        LOGGER.error( "CLIENT DESTROY: {}", message );
        this.ticker.cancel( true );
        this.socket.close();
    }

    public EncryptionHandler getEncryptionHandler() {
        return this.encryptionHandler;
    }

    public void ping( String ip, int port ) {
        this.socket.ping( ip, port );
    }

}
